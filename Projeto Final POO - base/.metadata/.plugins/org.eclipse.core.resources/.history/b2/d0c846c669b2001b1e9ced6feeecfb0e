package MainPrograma;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.InputStreamReader;
import java.io.UnsupportedEncodingException;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

import pessoas.Dependentes;
import pessoas.Funcionario;

public class MainPrograma {
	public static void main(String[] args){
		
		List<Funcionario> funcionarios = new ArrayList<>();
		DateTimeFormatter df = DateTimeFormatter.ofPattern("dd/MM/yyyy");
		Scanner ler = new Scanner(System.in);
		int opcao = 0;
		
		
		do {
			System.out.println("1 - Exibir todos os funcionarios e dependentes.");
			System.out.println("2 - Exibir os dados de salario de todos os funcionarios.");
			System.out.println("3 - Remover um funcionario da lista funcionario.");
			System.out.println("4 - Sair");
			
			try {
				opcao = ler.nextInt();	
			} catch (Exception e) {
				System.out.println("Encerrando, pois não digitou valor inteiro");
			}
			ler.nextLine();
			
			switch(opcao) {
			
					
				case 1:
					 try {
						 Scanner sc = new Scanner(new InputStreamReader(new FileInputStream(new File("e:\\Projeto Final POO\\Projeto-Final-POO\\entradas.csv")),"UTF-8"));
				            Funcionario funcionario = null;
				            while(sc.hasNext()) {	            
				                String linha = sc.nextLine();
				                if(!linha.isEmpty()) {
				                	if(funcionario != null) {
				                		String[] dadoDependente = linha.split(";");
					                    String nomedependente = dadoDependente[0];
					                    String cpf = dadoDependente[1];
					                    LocalDate data = LocalDate.parse(dadoDependente[2], df);
					                    String parentesco = dadoDependente[3];
					                    Dependentes dependentes = new Dependentes(nomedependente, cpf, data, parentesco);
					                    funcionario.getDependentes().add(dependentes);
					                    continue;
				                	}else {
				                		String[] dadoDaLinha = linha.split(";");
					                    String nome = dadoDaLinha[0];
					                    String cpf = dadoDaLinha[1];
					                    LocalDate data = LocalDate.parse(dadoDaLinha[2], df);				                 
					                    double salarioBruto = Integer.parseInt(dadoDaLinha[3]);
					                    funcionario = new Funcionario(nome, cpf, data, salarioBruto);
				                	}	              

				                } else {
				                	funcionarios.add(funcionario);
				                	funcionario = null;
				                }
				                
				            }
				            funcionarios.add(funcionario);
				            sc.close();
				            
				        } catch (FileNotFoundException | UnsupportedEncodingException e) {
				            e.printStackTrace();
				            
				        }
					 
					
					break;
					
				case 2:
					
					System.out.println("Digite o CPF do usuario para a visualização:");
					String cpfVisualização = ler.nextLine();
					
					for (Funcionario funcionario : funcionarios) {

			            if (funcionario.getCpf().equalsIgnoreCase(cpfVisualização)) {
			     
			            	System.out.println(funcionario);
			            }
					}
					break;
					
				case 3:
					System.out.println("Informe o funcionario a remover: ");
					funcionarios.remove(ler.nextLine());
					break;
					
				case 4:
					for (Funcionario funcionario : funcionarios) {
						System.out.println(funcionario);
					}

					break;

					
				case 5:
					System.out.println("A aplicação foi encerrada");
					break;
					default:
						System.out.println("Opção invalida");
						break;
				}
				
			}while (opcao != 5);
			
			ler.close();
		}

				
}
