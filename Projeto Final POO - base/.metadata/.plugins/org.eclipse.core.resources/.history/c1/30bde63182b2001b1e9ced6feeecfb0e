package Arquivos;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.UnsupportedEncodingException;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

import pessoas.Dependentes;
import pessoas.Funcionario;

public class Arquivos {
	protected String arquivo;
	static List<Funcionario> funcionarios = new ArrayList<>();
	Scanner sc;
	static DateTimeFormatter df = DateTimeFormatter.ofPattern("dd/MM/yyyy");
	
	
	public String getArquivo() {
		return arquivo;
	}

	public void setArquivo(String arquivo) {
		this.arquivo = arquivo;
	}

	public Arquivos(String arquivo) {
		super();
		this.arquivo = arquivo;
	}
	
	public static void lerArquivos() {
		try {
		     Scanner sc = new Scanner(new InputStreamReader(new FileInputStream(new File("e:\\Projeto Final POO\\Projeto-Final-POO\\entradas.csv")),"UTF-8"));
		       Funcionario funcionario = null;
		       while(sc.hasNext()) {
		           String linha = sc.nextLine();
		           if(!linha.isEmpty()) {
		               if(funcionario != null) {
		                   String[] dadoDependente = linha.split(";");
		                   String nomedependente = dadoDependente[0];
		                   String cpf = dadoDependente[1];
		                   LocalDate data = LocalDate.parse(dadoDependente[2], df);
		                   String parentesco = dadoDependente[3];
		                   Dependentes dependentes = new Dependentes(nomedependente, cpf, data, parentesco);
		                   funcionario.getDependentes().add(dependentes);
		                   continue;
		               }else {
		                   String[] dadoDaLinha = linha.split(";");
		                   String nome = dadoDaLinha[0];
		                   String cpf = dadoDaLinha[1];
		                   LocalDate data = LocalDate.parse(dadoDaLinha[2], df);
		                   double salarioBruto = Integer.parseInt(dadoDaLinha[3]);
		                   funcionario = new Funcionario(nome, cpf, data, salarioBruto);
		               }

		           } else {
		               funcionarios.add(funcionario);
		               funcionario = null;
		           }

		       }
		       funcionarios.add(funcionario);
		       sc.close();

		   } catch (FileNotFoundException | UnsupportedEncodingException e) {
		       e.printStackTrace();

		   }	 
	}
	
	public static void saidaArquivo() {
		try {
			OutputStreamWriter out = new OutputStreamWriter(new FileOutputStream("e:\\Projeto Final POO\\Projeto-Final-POO\\saidas.csv", true));
			for (Funcionario funcionario : funcionarios) {
                if(funcionario != null) {
                	out.append(funcionario.toString() + "\n");
                }
            }
			out.close();
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
		for (Funcionario funcionario : funcionarios) {
            if(funcionario != null) {
            	System.out.println(funcionario);
            }
	}
	}
}